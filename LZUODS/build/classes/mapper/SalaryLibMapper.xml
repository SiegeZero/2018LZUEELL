<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gsb.BasicObject.MBGDAO.SalaryLibMapper">
  <resultMap id="BaseResultMap" type="com.gsb.BasicObject.MBG.SalaryLib">
    <id column="salary_lib_no" jdbcType="INTEGER" property="salaryLibNo" />
    <result column="salary_version" jdbcType="CHAR" property="salaryVersion" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.gsb.BasicObject.MBG.SalaryLib">
    <result column="salary_lib_remark" jdbcType="LONGVARCHAR" property="salaryLibRemark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    salary_lib_no, salary_version
  </sql>
  <sql id="Blob_Column_List">
    salary_lib_remark
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.gsb.BasicObject.MBG.SalaryLibExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from salary_lib_table
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.gsb.BasicObject.MBG.SalaryLibExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary_lib_table
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from salary_lib_table
    where salary_lib_no = #{salaryLibNo,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from salary_lib_table
    where salary_lib_no = #{salaryLibNo,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.gsb.BasicObject.MBG.SalaryLibExample">
    delete from salary_lib_table
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gsb.BasicObject.MBG.SalaryLib">
    insert into salary_lib_table (salary_lib_no, salary_version, salary_lib_remark
      )
    values (#{salaryLibNo,jdbcType=INTEGER}, #{salaryVersion,jdbcType=CHAR}, #{salaryLibRemark,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.gsb.BasicObject.MBG.SalaryLib">
    insert into salary_lib_table
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salaryLibNo != null">
        salary_lib_no,
      </if>
      <if test="salaryVersion != null">
        salary_version,
      </if>
      <if test="salaryLibRemark != null">
        salary_lib_remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salaryLibNo != null">
        #{salaryLibNo,jdbcType=INTEGER},
      </if>
      <if test="salaryVersion != null">
        #{salaryVersion,jdbcType=CHAR},
      </if>
      <if test="salaryLibRemark != null">
        #{salaryLibRemark,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gsb.BasicObject.MBG.SalaryLibExample" resultType="java.lang.Long">
    select count(*) from salary_lib_table
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update salary_lib_table
    <set>
      <if test="record.salaryLibNo != null">
        salary_lib_no = #{record.salaryLibNo,jdbcType=INTEGER},
      </if>
      <if test="record.salaryVersion != null">
        salary_version = #{record.salaryVersion,jdbcType=CHAR},
      </if>
      <if test="record.salaryLibRemark != null">
        salary_lib_remark = #{record.salaryLibRemark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update salary_lib_table
    set salary_lib_no = #{record.salaryLibNo,jdbcType=INTEGER},
      salary_version = #{record.salaryVersion,jdbcType=CHAR},
      salary_lib_remark = #{record.salaryLibRemark,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update salary_lib_table
    set salary_lib_no = #{record.salaryLibNo,jdbcType=INTEGER},
      salary_version = #{record.salaryVersion,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gsb.BasicObject.MBG.SalaryLib">
    update salary_lib_table
    <set>
      <if test="salaryVersion != null">
        salary_version = #{salaryVersion,jdbcType=CHAR},
      </if>
      <if test="salaryLibRemark != null">
        salary_lib_remark = #{salaryLibRemark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where salary_lib_no = #{salaryLibNo,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.gsb.BasicObject.MBG.SalaryLib">
    update salary_lib_table
    set salary_version = #{salaryVersion,jdbcType=CHAR},
      salary_lib_remark = #{salaryLibRemark,jdbcType=LONGVARCHAR}
    where salary_lib_no = #{salaryLibNo,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gsb.BasicObject.MBG.SalaryLib">
    update salary_lib_table
    set salary_version = #{salaryVersion,jdbcType=CHAR}
    where salary_lib_no = #{salaryLibNo,jdbcType=INTEGER}
  </update>
</mapper>